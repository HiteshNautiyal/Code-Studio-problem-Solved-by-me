#include <bits/stdc++.h> 
#include <bits/stdc++.h> 
/*************************************************************

    Following is the LinkedListNode class structure

    template <typename T>   
    class LinkedListNode
    {
        public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode<T> *random;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*************************************************************/


/*

next pointer means only go 1->2->3.... so on
random pointer meand 1->3, 2->NULL .. so on 

APPROACH 1 :- 
1) create a linked list(using original list of next pointer)
2) random pointer copy ( means every node ke liye random ptr kitne dur tk rkhna hai)

So, T.C : O(N^2)


APPROACH 2 :-
1) create a clone list(using a next pointer of next pointer)
2) use mapping means in mapping, oldNode point to NewNode and original node point to clone Node like example 1->1, 2->2, .... so on.
3) clone->random = mapping[originalnode -> random]

So, T.C & S.C : O(N)

*/



//this is a code based on approach 2 concept
void insertAtTail(LinkedListNode<int> *&head, LinkedListNode<int> *&tail, int data)
    {
       LinkedListNode<int> *newNode = new LinkedListNode<int> (data);
        if(head == NULL)
        {
            head = newNode;
            tail = newNode;
            return;
        }
        else
        {
            tail -> next = newNode;
            tail = newNode;
        }
    }
LinkedListNode<int> *cloneRandomList(LinkedListNode<int> *head)
{
       //Step 1 : To Create a Clone List(using a original list next pointer)
        LinkedListNode<int> *cloneHead = NULL;
        LinkedListNode<int> *cloneTail = NULL;
        
        LinkedListNode<int> *temp = head;
        while(temp != NULL)
        {
            insertAtTail(cloneHead, cloneTail, temp->data);
            temp = temp->next;
            
        }
        
        //Step 2 : To Create a Map
        unordered_map<LinkedListNode<int> *, LinkedListNode<int> *> mapping;
        LinkedListNode<int> *originalNode = head;
        LinkedListNode<int> *cloneNode = cloneHead;
        
        while(originalNode != NULL and cloneNode != NULL)
        {
            mapping[originalNode] = cloneNode;
            originalNode = originalNode->next;
            cloneNode = cloneNode->next;
        }
        
        originalNode = head;
        cloneNode = cloneHead;
         
         //step 3
         
        while(originalNode != NULL)
        {
            cloneNode->random = mapping[originalNode->random];
            originalNode = originalNode->next;
            cloneNode = cloneNode->next;
        }
        
        return cloneHead;
}
