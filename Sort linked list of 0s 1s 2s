

/**** T.C : O(N) & S.C : O(1)
Node* sortList(Node *head)
{
    int zeroCount = 0;//for count : 0
    int oneCount = 0;//for count : 1
    int twoCount = 0;//for count : 2

    Node* temp = head;
    while(temp != NULL)
    {
        if(temp->data == 0)
        zeroCount++;
        else if(temp->data == 1)
        oneCount++;
        else if(temp->data == 2)
        twoCount++;

        temp = temp->next;
    }

    temp = head;//wapis temp ko starting m point krdo
    while(temp != NULL)
    {
        //now we replace them sorting wise
        if(zeroCount != 0)
        {
            temp->data = 0;
            zeroCount--;
        }
        else if(oneCount != 0)
        {
            temp->data = 1;
            oneCount--;
        }
        else if(twoCount != 0)
        {
            temp->data = 2;
            twoCount--;
        }

        temp = temp->next;
    }
    return head;

}
****/

//IF DATA REPLACEMENT IS NOT ALLOWED!!!
//we have data and pointer/links only in linked list
//So, we use dummynodes/pointers beccause if we dont create dummyNodes then we use if-else many times

//first we create dummyNode of head and tail of all 3 numbers
//then, merged it


//T.C : O(N) + O(1) + O(1) + O(1) = O(N)
//S.C : O(1)

Node* insertAtTail(Node* &Tail, Node* curr)
{
    Tail->next = curr;
     Tail = curr;
}
Node* sortList(Node *head)
{
    Node* zeroHead = new Node(-1);//dummynode
    Node* zeroTail = zeroHead;
    Node* oneHead = new Node(-1);
    Node* oneTail = oneHead;
    Node* twoHead = new Node(-1);
    Node* twoTail = twoHead;

    Node* curr = head;
    //create a list 
    while( curr != NULL)//T.C : O(N)
    {
        if(curr->data == 0)
        insertAtTail(zeroTail, curr);
        else if(curr->data == 1)
        insertAtTail(oneTail, curr);
        else if(curr->data == 2)
        insertAtTail(twoTail, curr);

        curr = curr->next;

    }
    

    //merged 3 lists
    //1's list not empty
    if(oneHead->next != NULL)
    {
        zeroTail->next = oneHead->next;
    }
    else{
        //1's list empty
        zeroTail->next = twoHead->next;
    }

    oneTail->next = twoHead->next;//T.C : O(1)
    twoTail->next = NULL;
    
    //setup head
    head = zeroHead->next;//T.C : O(1)
   
    //Below delete fucntion , T.C : O(1)
    //delete dummynodes
    delete zeroHead;
    delete oneHead;
    delete twoHead;

    return head;


}
