bool isValidParenthesis(string expression)
{
    stack<char> s;

    for(int i=0; i<expression.length(); i++)
    {
        char ch = expression[i];
        
        //if opening bracket => stack push character
        //if closing bracket => stack check and then pop character

        if(ch == '(' or ch == '{' or ch == '[')
        s.push(ch);
        else
        {
            //for closing bracket
            if (!s.empty()) {
              char top = s.top();
              if ((ch == ')' && top == '(') or (ch == '}' && top == '{') or (ch ==']' && top == '['))
              s.pop();
              else
              return false;
            }
            else
            return false;
        }

        
    }
    if(s.empty())
        return true;
        else
        return false;

}
