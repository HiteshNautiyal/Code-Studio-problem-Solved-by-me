#include<bits/stdc++.h>
vector<int> nextSmallerElements(vector<int> mat, int n)
{
    stack<int> s;
    s.push(-1);

    vector<int> ans(n);
    for(int i=n-1; i>=0; i--)
    {
        int curr = mat[i];
        while(s.top() != -1 and mat[s.top()] >= curr)
        {
            s.pop();
        }
        //if curr is greater than top 
        //ans is stack ka top
        ans[i] = (s.top());
        s.push(i);
    }
    return ans;
}
vector<int> prevSmallerElements(vector<int> mat, int n)
{
    stack<int> s;
    s.push(-1);

    vector<int> ans(n);
    for(int i=0; i<n; i++)
    {
        int curr = mat[i];
        while(s.top() != -1 and mat[s.top()] >= curr)
        {
            s.pop();
        }
        //if curr is greater than top 
        //ans is stack ka top
        ans[i] = (s.top());
        s.push(i);
    }
    return ans;
}

    int largestRectangleArea(vector<int>& mat, int n) {
        

        vector<int> next(n);
        next = nextSmallerElements(mat, n);//right m jitna jha skte h utna jayenge

        vector<int> prev(n);
        prev = prevSmallerElements(mat, n);//left m jitna jha skte h utna jayenge

        int area = INT_MIN;

        for(int i=0; i<n; i++)
        {
            int length = mat[i];
           

            if(next[i] == -1)//like if [2,2,2,2] so humara next and prev honge [-1,-1,-1,-1] isliye negative nhi aaye hum yeh krenge
            {
                next[i] = n;
            }
             int breadth = next[i] - prev[i] - 1;
            int newArea = length*breadth;

            area = max(area, newArea);
        }
        return area;
    }

int maximalAreaOfSubMatrixOfAll1(vector<vector<int>> &mat, int n, int m){
	 int area = largestRectangleArea(mat[0], m);
        
        for(int i=1; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(mat[i][j] != 0)
                mat[i][j] = mat[i][j] + mat[i-1][j];
                else
                mat[i][j] = 0;
            }
            area = max(area, largestRectangleArea(mat[i], m));
        }
        
        return area;
}
