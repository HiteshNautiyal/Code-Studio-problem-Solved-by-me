We Given a input array, and we only sort this array.

In Merge Sort, first we find middle indices of a array then we divided into two array and that steps again and again until we divided array in single elements block, then after these, we merge all the blocks in sorted way

Code:- 




void merge_array(int s, int e, vector < int > & arr)
{
    int mid = (s+e)/2;

    int len1 = mid-s+1;//its a length of starting to mid of a array
    int len2 = e-mid;//its a length of remaining array

    int *first = new int[len1];//create a another array whose length is half of given input array
    int *second = new int[len2];//same create a another array whose length is half of given input array
    
    //copy elements
    int main_array_index = s;//after merge all arrays it is represent index of resultant array 

    //first we copy all the elements of the first half array 
    for(int i=0; i<len1; i++)
    {
        first[i] = arr[main_array_index++];
    }

    main_array_index = mid+1;

    //now, we copy all the elements of the remaining half array
    for(int i=0; i<len2; i++)
    {
        second[i] = arr[main_array_index++];
    }

    
    //now, we stored all the elements in resultant array
    //after this, we sort the elements of resultant array

    int index1 = 0;
    int index2 = 0;
    main_array_index = s;

    while(index1 < len1 and index2 < len2)
    {
        if(first[index1] < second[index2])//when first array me elements second array se smaller hai then we store that element in main array 
        {
            arr[main_array_index++] = first[index1++];
        }
        else
        {
            arr[main_array_index++] = second[index2++];
        }
    }

    while(index1 < len1)
    {
        arr[main_array_index++] = first[index1++];
    }
    
    while(index2 < len2)
    {
        arr[main_array_index++] = second[index2++];
    }




}
void merge(int s, int e, vector < int > & arr) // this function divides a input array in two parts from mid points
{
    //base case
    if(s>=e) //normal binary search condition in recursion
    {
        return;
    }

    int mid = (s+e)/2;

    merge(s,mid,arr);//left part sort
    
    merge(mid+1, e, arr);//right part sort

    merge_array(s, e, arr);//we merge both left and right part 


}

void mergeSort(vector < int > & arr, int n) {
    
    
    merge(0, n-1, arr);//we call a function 
}
